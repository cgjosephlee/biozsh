#compdef khmer

info="-h --help --version"

_khmer-abundance-dist() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:The name of the input k-mer countgraph file:_files'
		'3:input FAST[AQ] sequence file:_files'
		'4:output_histogram_filename:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -b --no-bigcount)"{-b,--no-bigcount}'[Do not count k-mers past 255]'
		"($info -f --force)"{-f,--force}'[Continue even if specified input files do not exist or are empty]'
		"($info -s --squash)"{-s,--squash}'[Overwrite existing output_histogram_filename]'
		"($info -z --no-zero)"{-z,--no-zero}'[Do not output zero-count bins]'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-abundance-dist-single() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:The name of the input k-mer countgraph file:_files'
		'3:output histogram file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -N --n_tables)"{-N+,--n_tables=}'[number of tables to use in k-mer countgraph (default:4)]:n_tables:'
		"($info -U --unique-kmers)"{-U+,--unique-kmers=}'[approximate number of unique kmers in the input set]:unique kmers:'
		"($info)--fp-rate=[Override the automatic FP rate setting for the current script]:fp_rate:"
		"($info -x --max-tablesize -M --max-memory-usage)"{-x+,--max-tablesize=}'[upper bound on tablesize to use]:max_tablesize:'
		"($info -x --max-tablesize -M --max-memory-usage)"{-M+,--max-memory-usage=}'[maximum amount of memory to use for data structure]:max_memory_usage:'
		"($info -T --threads)"{--threads,-T}'[Number of simultaneous threads to execute (default: 1)]:threads:'
		"($info -b --no-bigcount)"{-b,--no-bigcount}'[Do not count k-mers past 255]'
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
		"($info -s --squash)"{-s,--squash}'[Overwrite existing output_histogram_filename]'
		"($info -z --no-zero)"{-z,--no-zero}'[Do not output zero-count bins]'
		"($info)--savegraph=[Save the k-mer countgraph to the specified file]:file:_files"
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-annotate-partitions() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:basename for input and output files:_files'
		'3:input FAST[AQ] sequences to annotate:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-count-median() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:input k-mer countgraph filename:_files'
		'3:input FAST[AQ] sequences to annotate:_files'
		'4:output summary file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-do-partition() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:base name for output files:_files'
		'*:input FAST[AQ] sequences to annotate:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -f --force)"{-f,--force}'[Continue even if specified input files do not exist or are empty]'
		"($info -N --n_tables)"{-N+,--n_tables=}'[number of tables to use in k-mer countgraph (default:4)]:n_tables:'
		"($info -U --unique-kmers)"{-U+,--unique-kmers=}'[approximate number of unique kmers in the input set]:unique kmers:'
		"($info)--fp-rate=[Override the automatic FP rate setting for the current script]:fp_rate:"
		"($info -x --max-tablesize -M --max-memory-usage)"{-x+,--max-tablesize=}'[upper bound on tablesize to use]:max_tablesize:'
		"($info -x --max-tablesize -M --max-memory-usage)"{-M+,--max-memory-usage=}'[maximum amount of memory to use for data structure]:max_memory_usage:'
		"($info -T --threads)"{-T+,--threads=}'[Number of simultaneous threads to execute (default: 1)]:threads:'
		"($info -s --subset-size)"{-s+,--subset-size=}'[Set subset size (usually 1e5-1e6 is good, default: 100000)]:subset size:'
		"($info)--no-big-traverse[Truncate graph joins at big traversals]"
		"($info)--keep-subsets[Keep individual subsets]"
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-extract-long-sequences() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'*:input FAST[AQ] sequences:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -o --output)"{-o+,--output=}'[The output sequence file]:output file:_files'
		"($info -l --length)"{-l+,--length=}'[The minimum length of the sequence file]:length:'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-extract-paired-reads() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'*:infile:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info -d --output-dir -p --output-paired -s --output-single)"{-d+,--output-dir=}'[Output split reads to specified directory]:_files -/'
		"($info -p --output-paired -d --output-dir)"{-p+,--output-paired=}'[Output paired reads to this file]:_files'
		"($info -s --output-single -d --output-dir)"{-s+,--output-single=}'[Output orphaned reads to this file]:_files'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-extract-partitions() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:output filename prefix:'
		'*:input partition file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info -X --max-size)"{-X+,--max-size=}'[Max group size (n sequences, default: 1000000)]:max size:'
		"($info -m --min-partition-size)"{-m+,--min-partition-size=}'[Minimum partition size worth keeping (default: 5)]:min part size:'
		"($info -n --no-output-groups)"{-n,--no-output-groups}'[Do not actually output groups files]'
		"($info -U --output-unassigned)"{-U,--output-unassigned}'[Output unassigned sequences, too]'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-fastq-to-fasta() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:input sequence:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info -o --output)"{-o+,--output=}'[Output FASTA sequence file]:filename:_files'
		"($info -n --n_keep)"{-k,--n_keep}"[Keep reads containing 'N']"
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-filter-abund() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:input count graph:_files'
		'*:input sequence file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
		"($info -T --threads)"{-T+,--threads=}'[Number of simultaneous threads to execute]:threads:'
		"($info -C --cutoff)"{-C+,--cutoff=}'[Trim at k-mers below this abundance]:cutoff:'
		"($info -V --variable-coverage)"{-V,--variable-coverage}'[Only trim low-abundance k-mers from sequences that have high coverage]'
		"($info -Z --normalize-to)"{-Z+,--normalize-to=}'[Base the variable-coverage cutoff on this median k-mer abundance]:normalize to:'
		"($info -o --output)"{-o+,--output=}'[Output the trimmed sequences into a single]:filename:_files'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-filter-abund-single() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:FAST[AQ] sequence file to trim:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -N --n_tables)"{-N+,--n_tables=}'[number of tables to use in k-mer countgraph (default:4)]:n_tables:'
		"($info -U --unique-kmers)"{-U+,--unique-kmers=}'[approximate number of unique kmers in the input set]:unique kmers:'
		"($info)--fp-rate=[Override the automatic FP rate setting for the current script]:fp_rate:"
		"($info -x --max-tablesize -M --max-memory-usage)"{-x+,--max-tablesize=}'[upper bound on tablesize to use]:max_tablesize:'
		"($info -x --max-tablesize -M --max-memory-usage)"{-M+,--max-memory-usage=}'[maximum amount of memory to use for data structure]:max_memory_usage:'
		"($info -T --threads)"{-T+,--threads=}'[Number of simultaneous threads to execute (default: 1)]:threads:'
		"($info -C --cutoff)"{-C+,--cutoff=}'[Trim at k-mers below this abundance]:cutoff:'
		"($info)--savegraph=[Save the k-mer countgraph to the specified file]:file:_files"
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-filter-stoptags() {
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:input stoptags file:_files'
		'3:input sequence file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-find-knots(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:graph base:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Continue past warnings]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -N --n_tables)"{-N+,--n_tables=}'[number of tables to use in k-mer countgraph (default:4)]:n_tables:'
		"($info -U --unique-kmers)"{-U+,--unique-kmers=}'[approximate number of unique kmers in the input set]:unique kmers:'
		"($info)--fp-rate=[Override the automatic FP rate setting for the current script]:fp_rate:"
		"($info -x --max-tablesize -M --max-memory-usage)"{-x+,--max-tablesize=}'[upper bound on tablesize to use]:max_tablesize:'
		"($info -x --max-tablesize -M --max-memory-usage)"{-M+,--max-memory-usage=}'[maximum amount of memory to use for data structure]:max_memory_usage:'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-interleave-reads(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:left:_files'
		'3:right:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Continue past warnings]'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info -o --output)"{-o+,--output=}'[filename]:file:_files'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-load-graph(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:output node graph:_files'
		'*:input sequence file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Continue past warnings]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -N --n_tables)"{-N+,--n_tables=}'[number of tables to use in k-mer countgraph (default:4)]:n_tables:'
		"($info -U --unique-kmers)"{-U+,--unique-kmers=}'[approximate number of unique kmers in the input set]:unique kmers:'
		"($info)--fp-rate=[Override the automatic FP rate setting for the current script]:fp_rate:"
		"($info -x --max-tablesize -M --max-memory-usage)"{-x+,--max-tablesize=}'[upper bound on tablesize to use]:max_tablesize:'
		"($info -x --max-tablesize -M --max-memory-usage)"{-M+,--max-memory-usage=}'[maximum amount of memory to use for data structure]:max_memory_usage:'
		"($info -T --threads)"{--threads,-T}'[Number of simultaneous threads to execute (default: 1)]:threads:'
		"($info -n --no-build-tagset)"{-n,--no-build-tagset}'[Do not construct tagset while loading sequences]'		
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-load-into-counting(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:output node graph:_files'
		'*:input sequence file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Continue past warnings]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -N --n_tables)"{-N+,--n_tables=}'[number of tables to use in k-mer countgraph (default:4)]:n_tables:'
		"($info -U --unique-kmers)"{-U+,--unique-kmers=}'[approximate number of unique kmers in the input set]:unique kmers:'
		"($info)--fp-rate=[Override the automatic FP rate setting for the current script]:fp_rate:"
		"($info -x --max-tablesize -M --max-memory-usage)"{-x+,--max-tablesize=}'[upper bound on tablesize to use]:max_tablesize:'
		"($info -x --max-tablesize -M --max-memory-usage)"{-M+,--max-memory-usage=}'[maximum amount of memory to use for data structure]:max_memory_usage:'
		"($info -T --threads)"{--threads,-T}'[Number of simultaneous threads to execute (default: 1)]:threads:'
		"($info -b --no-bigcount)"{-b,--no-bigcount}'[Limit counts to 255]'
		"($info -s --summary-info)"{-s+,--summary-info=}'[What format should the machine readable run summary be in?]:format:(json tsv)'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-make-initial-stoptags(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:graph base:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Continue past warnings]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -N --n_tables)"{-N+,--n_tables=}'[number of tables to use in k-mer countgraph (default:4)]:n_tables:'
		"($info -U --unique-kmers)"{-U+,--unique-kmers=}'[approximate number of unique kmers in the input set]:unique kmers:'
		"($info)--fp-rate=[Override the automatic FP rate setting for the current script]:fp_rate:"
		"($info -x --max-tablesize -M --max-memory-usage)"{-x+,--max-tablesize=}'[upper bound on tablesize to use]:max_tablesize:'
		"($info -x --max-tablesize -M --max-memory-usage)"{-M+,--max-memory-usage=}'[maximum amount of memory to use for data structure]:max_memory_usage:'
		"($info -s --subset-size)"{-s+,--subset-size=}'[Set subset size (default 1e4 is prob ok)]:subset size:'
		"($info -S --stoptags)"{-S+,--stoptags=}'[Use stoptags in this file during partitioning]:file:_files'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-merge-partitions(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:graph base:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Continue past warnings]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info)--keep-subsets[Keep individual subsets]"
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-normalize-by-median(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'*:input sequence file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Continue past file reading errors]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -N --n_tables)"{-N+,--n_tables=}'[number of tables to use in k-mer countgraph (default:4)]:n_tables:'
		"($info -U --unique-kmers)"{-U+,--unique-kmers=}'[approximate number of unique kmers in the input set]:unique kmers:'
		"($info)--fp-rate=[Override the automatic FP rate setting for the current script]:fp_rate:"
		"($info -x --max-tablesize -M --max-memory-usage)"{-x+,--max-tablesize=}'[upper bound on tablesize to use]:max_tablesize:'
		"($info -x --max-tablesize -M --max-memory-usage)"{-M+,--max-memory-usage=}'[maximum amount of memory to use for data structure]:max_memory_usage:'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info -o --output)"{-o+,--output=}'[Only output a single file with the specified filename]:file:_files'
		"($info -q --quiet)"{-q,--quiet}'[Be quiet]'
		"($info -C --cutoff)"{-C,--cutoff}'[When the median k-mer coverage level above is above this number the read is not kept]'
		"($info -p --paired --force_single)"{-p,--paired}'[Require that all sequences are paired]'
		"($info -p --paired)--force_single[treat all sequences as single-ended/unpaired]"
		"($info -u --unpaired-reads)"{-u+,--unpaired-reads=}'[include a file of unpaired reads to which -p/--paired does not apply]:file:_files'
		"($info -s --savegraph)"{-s+,--savegraph=}'[save the k-mer countgraph after all reads are loaded]:file:_files'
		"($info -R --report)"{-R+,--report=}'[report filename]:file:_files'
		"($info)--report-frequency=[report frequency]:frequency:"
		"($info -l --loadgraph)"{-l+,--loadgraph=}'[load a precomputed k-mer graph]:file:_files'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-partition-graph(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'2:basename:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
		"($info -s --subset-size)"{-s+,--subset-size=}'[Set subset size (default 1e4 is prob ok)]:subset size:'
		"($info -S --stoptags)"{-S+,--stoptags=}'[Use stoptags in this file during partitioning]:file:_files'
		"($info)--no-big-traverse[Truncate graph joins at big traversals]"
		"($info -T --threads)"{-T+,--threads=}'[Number of simultaneous threads to execute]:threads:'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-readstats(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'*:file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
		"($info -o --output)"{-o+,--output=}'[output file for statistics]:file:_file'
		"($info)--csv[Use the CSV format for the statistics, including column headers]"
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-sample-reads-randomly(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'*:file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
		"($info -o --output)"{-o+,--output=}'[output file for statistics]:file:_file'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info)--force_single[Ignore read pair information if present]"
		"($info -N --num_reads)"{-N+,--num_reads=}'[number of reads]:num reads:'
		"($info -M --max_reads)"{-M+,--max_reads=}'[number of reads to process]:max reads:'
		"($info -S --samples)"{-S+,--samples=}'[number of samples]:num samples:'
		"($info -R --random-seed)"{-R+,--random-seed=}'[Provide a random seed for the generator]:seed:'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-split-paired-reads(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'*:infile:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -f --force)"{-f,--force}'[Overwrite output file if it exists]'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info -d --output-dir -1 --output-first -2 --output-second)"{-d+,--output-dir=}'[Output split reads to specified directory]:file:_file -/'
		"($info -0 --output-orphaned)"{-0+,--output-orphaned=}'[Allow "orphaned" reads and extract them to this file]:file:_files'
		"($info -1 --output-first -d --output-dir)"{-1+,--output-first=}'[Output "left" reads to this file]:file:_files'
		"($info -2 --output-second -d --output-dir)"{-2+,--output-second=}'[Output "right" reads to this file]:file:_files'
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-trim-low-abund(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'*:input file:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info)--force[Force]"
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -N --n_tables)"{-N+,--n_tables=}'[number of tables to use in k-mer countgraph (default:4)]:n_tables:'
		"($info -U --unique-kmers)"{-U+,--unique-kmers=}'[approximate number of unique kmers in the input set]:unique kmers:'
		"($info)--fp-rate=[Override the automatic FP rate setting for the current script]:fp_rate:"
		"($info -x --max-tablesize -M --max-memory-usage)"{-x+,--max-tablesize=}'[upper bound on tablesize to use]:max_tablesize:'
		"($info -x --max-tablesize -M --max-memory-usage)"{-M+,--max-memory-usage=}'[maximum amount of memory to use for data structure]:max_memory_usage:'
		"($info -C --cutoff)"{-C+,--cutoff=}'[remove k-mers below this abundance]:num:'
		"($info --bzip)--gzip[Compress output using gzip]"
		"($info --gzip)--bzip[Compress output using bzip2]"
		"($info -Z --normalize-to)"{-Z+,--normalize-to=}'[base cutoff on this median k-mer abundance]:cutoff:'
		"($info -o --output)"{-o+,--output=}'[Only output a single file with the specified filename]:file:_files'
		"($info -V --variable-coverage)"{-V,--variable-coverage}'[ Only trim low-abundance k-mers from sequences that have high coverage]'
		"($info -l --loadgraph)"{-l+,--loadgraph=}'[load a precomputed k-mer graph]:file:_files'
		"($info -s --savegraph)"{-s+,--savegraph=}'[save the k-mer countgraph after all reads are loaded]:file:_files'
		"($info -T --tempdir)"{-T+,--tempdir=}'[Set tempdir]:tempdir:_files -/'
		"($info)--ignore-pairs[Ignore pairs]"
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer-unique-kmers(){
	integer ret=1
	local -a args
	args+=(
		'1:script:'
		'*:Input FAST[AQ] sequence filename:_files'
		'(- *)'{-h,--help}'[show help message and exit]'
		'(- *)--version[show program version number and exit]'
		"($info -k --ksize)"{-k+,--ksize=}'[k-mer size to use (default: 32)]:ksize:'
		"($info -q --quiet)"{-q,--quiet}'[Be quiet]'
		"($info -e --error-rate)"{-e+,--error-rate=}'[Acceptable error rate (default: 0.01)]:float:'
		"($info -R --report)"{-R+,--report=}'[generate informational report and write to file]:file:_files'
		"($info -S --stream-records)"{-S,--stream-records}'[write input sequences to stdout]'
		"($info)--diagnostics[print out recommended tablesize arguments and restrictions]"
	)
	_arguments -s $args[@] && ret=0
	return ret
}

_khmer() {
	integer ret=1
	local -a args
	if ((CURRENT == 2)); then
		# complete args and commands
		# TODO: add descriptions
		args+=(
			'(- *)--help[print help]'
			'1:script:(
				abundance-dist
				abundance-dist-single
				annotate-partitions
				count-median
				do-partition
				extract-long-sequences
				extract-paired-reads
				extract-partitions
				fastq-to-fasta
				filter-abund
				filter-abund-single
				filter-stoptags
				find-knots
				interleave-reads
				load-graph
				load-into-counting
				make-initial-stoptags
				merge-partitions
				normalize-by-median
				partition-graph
				readstats
				sample-reads-randomly
				split-paired-reads
				trim-low-abund
				unique-kmers
			)'
		)

		_arguments -s $args[@]

		ret=0
	else
		# delegate to sub commands
		local subcmd=_khmer-$words[2]
		if ! _call_function ret $subcmd ; then
			_message "unknown sub-command: $words[2]"
		fi
	fi
	return ret
}

_khmer
