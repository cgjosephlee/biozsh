#compdef mummer nucmer promer mummerplot show-coords show-tiling show-aligns show-diff show-snps delta-filter

# mummer 4.0.0beta2
# nucmer 4.0.0beta2
# promer 3.07
# mummerplot 3.5

__nucmer_version(){
    nuc_ver=$(nucmer --version 2> /dev/null | awk '{print substr($0,1,1)}')
}

_mummer_self(){
    local ret=1
    local -a args
    local nuc_ver
    __nucmer_version
    args+=(
        '(-b -r)-b[Compute forward and reverse complement matches]'
        '(-b -r)-r[Only compute reverse complement matches]'
        '-c[Report the query-position of a reverse complement match relative to the original query sequence]'
        '-F[Force 4 column output format regardless of the number of reference sequence inputs]'
        '(-h -help)'{-h,-help}'[Show possible options]'
        '-l[Set the minimum length of a match (default=20)]:int: '
        '-L[Show the length of the query sequences on the header line]'
        '(-maxmatch -mum -mumreference -mumcand)-maxmatch[Compute all maximal matches regardless of their uniqueness]'
        '(-maxmatch -mum -mumreference -mumcand)-mum[Compute maximal matches that are unique in both sequences]'
        '(-maxmatch -mum -mumreference -mumcand)'{-mumreference,-mumcand}'[Compute maximal matches that are unique in the reference but not necessarily in the query-sequence (default)]'
        '-n[Match only the characters a, c, g, or t; they can be in upper or in lower case]'
        '-s[Show the matching substrings]'
        '(-v --version)'{-v,--version}'[Display the version information and exit]'
        '*:file:_files'
    )
    if [ "$nuc_ver" -eq 4 ] ; then
        args+=(
            '-k[Sampled suffix positions (default=1)]:int:'
            '(-threads -qthreads)-threads[Number of threads to use for -maxmatch, only valid k > 1]:int:'
            '(-threads -qthreads)-qthreads[Number of threads to use for queries]:int:'
            '-suflink[Use suffix links in the index and during search (auto)]:boolean:((1\:yes 2\:no))'
            '-child[Use child table in the index and during search (auto)]:boolean:((1\:yes 2\:no))'
            '-skip[Sparsify the MEM-finding algorithm even more, performing jumps of skip*k (auto (l-10)/k)]:int::int:'
            '-kmer[Use kmer table containing sa-intervals (speeds up searching first k characters) in the index and during search (auto)]:int:'
            '-save[Save index to file to use again later]:file:_files'
            '-load[Load index from file]:file:_files'
        )
    fi
    _arguments $args[@] && ret=0
    return ret
}

_nucmer() {
    local ret=1
    local -a args
    local nuc_ver
    __nucmer_version
    if [ "$nuc_ver" -eq 4 ] ; then
        args+=(
            '(--maxmatch --mum)--mum[Use anchor matches that are unique in both the reference and query (default=false)]'
            '(--maxmatch --mum)--maxmatch[Use all anchor matches regardless of their uniqueness (default=false)]'
            '(-b --breaklen=)'{-b,--breaklen=-}'[Set the distance an alignment extension will attempt to extend poor scoring regions before giving up (default=200)]:int:'
            '(-c --mincluster=)'{-c,--mincluster=-}'[Sets the minimum length of a cluster of matches (default=65)]:int:'
            '(-D --diagdiff=)'{-D,--diagdiff=-}'[Set the maximum diagonal difference between two adjacent anchors in a cluster (default=5)]:int:'
            '(-d --diagfactor=)'{-d,--diagfactor=-}'[Set the maximum diagonal difference between two adjacent anchors in a cluster as a differential fraction of the gap length (0.default=12)]:float:'
            '--noextend[Do not perform cluster extension step (default=false)]'
            '(-f --forward)'{-f,--forward}'[Use only the forward strand of the Query sequences (default=false)]'
            '(-g --maxgap=)'{-g,--maxgap=-}'[Set the maximum gap between two adjacent matches in a cluster (default=90)]'
            '(-l --minmatch=)'{-l,--minmatch=-}'[Set the minimum length of a single exact match (default=20)]:int:'
            '(-L --minalign=)'{-L,--minalign=-}'[Minimum length of an alignment, after clustering and extension (default=0)]:int:'
            '--nooptimize[No alignment score optimization (default=false)]'
            '(-r --reverse)'{-r,--reverse}'[Use only the reverse complement of the Query sequences (default=false)]'
            '--nosimplify[Do not simplify alignments by removing shadowed clusters. Use this option when aligning a sequence to itself to look for repeats (default=false)]'
            '(-p --prefix=)'{-p,--prefix=-}'[Write output to PREFIX.delta (default=out)]:file:_files'
            '--delta=-[Output delta file to PATH (instead of PREFIX.delta)]:file:_files'
            '--sam-short=-[Output SAM file to PATH, short format]:file:_files'
            '--sam-long=-[Output SAM file to PATH, long format]:file:_files'
            '--save=-[Save suffix array to files starting with PREFIX]:file:_files'
            '--load=-[Load suffix array from file starting with PREFIX]:file:_files'
            '--batch=-[Proceed by batch of chunks of BASES from the reference]:file:_files'
            '(-t --threads=)'{-t,--threads=-}'[Use NUM threads (default=# of cores)]:int:'
            '(-U --usage)'{-U,--usage}'[Usage]'
            '(-h --help)'{-h,--help}'[Help message]'
            '--full-help[Detailed help message]'
            '(-V --version)'{-V,--version}'[Display the version information and exit]'
            '*:file:_files'
        )
    else
        args+=(
            '(--maxmatch --mum --mumreference --mumcand)--maxmatch[Compute all maximal matches regardless of their uniqueness]'
            '(--maxmatch --mum --mumreference --mumcand)--mum[Compute maximal matches that are unique in both sequences]'
            '(--maxmatch --mum --mumreference --mumcand)'{--mumreference,--mumcand}'[Compute maximal matches that are unique in the reference but not necessarily in the query-sequence (default)]'
            '(-b -breaklen)'{-b,-breaklen}'[Set the distance an alignment will be extended]:int:'
            '(--nobanded)--banded[Enforce absolute banding of dynamic programming matrix]'
            '(  --banded)--nobanded[Cease absolute banding of dynamic programming matrix]'
            '(-c -mincluster)'{-c,-mincluster}'[Sets the minimum length of a cluster of matches]:int:'
            '(-nodelta)-delta[Create a delta file]'
            '(-delta)-nodelta[Do not create a delta file]'
            '(- *)--depend[Print the dependency information and exit]'
            '(-D -diagdiff)'{-D,-diagdiff}'[Maximum diagonal difference between two anchors in a cluster]:number:'
            '(-d -diagfactor)'{-d,-diagfactor}'[Differential fraction of the gap length for two anchors]:number:'
            '(-noextend)-extend[Enable the cluster extension step]'
            '(-extend)-noextend[Disable the cluster extension step]'
            '(-f --forward)'{-f,--forward}'[Use only the forward strand of the Query sequences]'
            '(-g -maxgap)'{-g,-maxgap}'[Maximum gap between two adjacent matches in a cluster]:number:'
            '(- *)'{-h,--help}'[Display help information and exit]'
            '(-l -minmatch)'{-l,-minmatch}'[Minimum length of a single match]:number:'
            '(-o --coords)'{-o,--coords}'[Automatically generate the original NUCmer1.1 coords]'
            '(-nooptimize)-optimize[Enable alignment score optimization]'
            '(-optimize)-nooptimize[Disable alignment score optimization]'
            '(-p -prefix)'{-p,-prefix}'[Set the prefix of the output files]:string:'
            '(-r --reverse)'{-r,--reverse}'[Use only the reverse complement of the Query sequences]'
            '(-nosimplify)-simplify[Simplify alignments by removing shadowed clusters]'
            '(-simplify)-nosimplify[Keep shadowed clusters]'
            '(- *)'{-V,--version}'[Display the version information and exit]'
            '*:file:_files'
        )
    fi
    _arguments $args[@] && ret=0
    return ret
}

_promer() {
    local ret=1
    local -a args
    args+=(
        '--mum[Use anchor matches that are unique in both the reference and query]'
        '(--mumcand --mumreference)'{--mumcand,--mumreference}'[Use anchor matches that are unique in in the reference but not necessarily unique in the query (default behavior)]'
        '--maxmatch[Use all anchor matches regardless of their uniqueness]'
        '-b[Set the distance an alignment extension will attempt to extend poor scoring regions before giving up, measured in amino acids (default=60)]::'
        '-c[Sets the minimum length of a cluster of matches, measured in amino acids (default=20)]::'
        '--nodelta[Toggle the creation of the delta file]'
        '--depend[Print the dependency information and exit]'
        '-d[Set the clustering diagonal difference separation factor (default=.11)]'
        '--noextend[Toggle the cluster extension step]'
        '-g[Set the maximum gap between two adjacent matches in a cluster, measured in amino acids (default=30)]::'
        '-l[Set the minimum length of a single match, measured in amino acids (default=6)]::'
        '-m[Set the maximum bookend masking lenth, measured in amino acids (default=8)]::'
        '(-o --coords)'{-o,--coords}'[Automatically generate the original PROmer1.1 ".coords" output file using the "show-coords" program]'
        '--nooptimize[Toggle alignment score optimization]'
        '-p[Set the prefix of the output files (default="out")]::'
        '-x[Set the alignment matrix number (default=2)]:matrix:((1\:BLOSUM\ 45 2\:BLOSUM\ 62 3\:BLOSUM\ 80))'
        '(-V --version)'{-V,--version}'[Display the version information and exit]'
        '(-h --help)'{-h,--help}'[Display help information and exit]'
        '*:file:_files'
    )
    _arguments $args[@] && ret=0
    return ret
}

_mummerplot() {
    local ret=1
    local -a args
    args+=(
        '-b[Highlight alignments with breakpoints further than breaklen nucleotides from the nearest sequence end]'
        '--nocolor[Turn off all plot color]'
        '(-c --coverage --nocoverage)'{-c,--coverage,--nocoverage}'[Generate a reference coverage plot (default for .tiling)]'
        '--depend[Print the dependency information and exit]'
        '(-f --filter)'{-f,--filter}'[Only display .delta alignments which represent the "best" hit to any particular spot on either sequence]'
        '(-l --layout)'{-l,--layout}'[Layout a .delta multiplot in an intelligible fashion, this option requires the -R -Q options]'
        '--fat[Layout sequences using fattest alignment only]'
        '-p[Set the prefix of the output files (default="out")]:prefix:_files'
        '-rv[Reverse video for x11 plots]'
        '-r[Plot a particular reference sequence ID on the X-axis]::'
        '-q[Plot a particular query sequence ID on the Y-axis]::'
        '-R[Plot an ordered set of reference sequences from Rfile]:file:_files'
        '-Q[Plot an ordered set of query sequences from Qfile]:file:_files'
        '-r[Specify the port to send reference ID and position on mouse double click in X11 plot window]::'
        '-q[Specify the port to send query IDs and position on mouse double click in X11 plot window]::'
        '(--small --medium --large)'{--small,--medium,--large}'[Set the output size to small, medium or large (default=--small)]'
        '(-S --SNP)'{-S,--SNP}'[Highlight SNP locations in each alignment]'
        '(--x11 --postscript --png)'{--x11,--postscript,--png}'[Set the output terminal to x11, postscript or png (default=--x11)]'
        '-t[Specify the gnuplot plot title (default=none)]::'
        '-x[Set the xrange for the plot "\[min:max\]"]::'
        '-y[Set the yrange for the plot "\[min:max\]"]::'
        '(-V --version)'{-V,--version}'[Display the version information and exit]'
        '(-h --help)'{-h,--help}'[Display help information and exit]'
        '*:file:_files'
    )
    _arguments $args[@] && ret=0
    return ret
}

_show_coords() {
    local ret=1
    local -a args
    args+=(
        '-b[Merges overlapping alignments regardless of match dir or frame and does not display any identity information.]'
        '-B[Switch output to btab format]'
        '-c[Include percent coverage information in the output]'
        '-d[Display the alignment direction in the additional FRM columns (default for promer)]'
        '-h[Display help information]'
        '-H[Do not print the output header]'
        '-I[Set minimum percent identity to display]:float:'
        '-k[Do not display alignments that overlap another alignment in a different frame by more than 50% of their length, AND have a smaller percent similarity or are less than 75% of the size of the other alignment (promer only)]'
        '-l[Include the sequence length information in the output]'
        '-L[Set minimum alignment length to display]:int:'
        '-o[Annotate maximal alignments between two sequences]'
        '-q[Sort output lines by query IDs and coordinates]'
        '-r[Sort output lines by reference IDs and coordinates]'
        '-T[Switch output to tab-delimited format]'
        '*:file:_files'
    )
    _arguments $args[@] && ret=0
    return ret
}

_show_tiling(){
    local ret=1
    local -a args
    args+=(
        '-a[Describe the tiling path by printing the tab-delimited alignment region coordinates to stdout]'
        '-c[Assume the reference sequences are circular, and allow tiled contigs to span the origin]'
        '-h[Display help information]'
        '-g[Set maximum gap between clustered alignments (nucmer_default=1000, promer_default=-1, -1=Inf)]:int:'
        '-i[Set minimum percent identity to tile (nucmer_default=90.0, promer_default=55.0)]:float:'
        '-l[Set minimum length contig to report (default=1, -1=Inf)]:int:'
        '-p[Output a pseudo molecule of the query contigs to "file"]:file:_files'
        '-R[Deal with repetitive contigs by randomly placing them in one of their copy locations (implies -V 0)]'
        '-t[Output a TIGR style contig list of each query sequence that sufficiently matches the reference (non-circular)]:file:_files'
        '-u[Output the tab-delimited alignment region coordinates of the unusable contigs to "file"]:file:_files'
        '-v[Set minimum contig coverage to tile (nucmer_default=95.0, promer_default=50.0)]:float:'
        '-V[Set minimum contig coverage difference (nucmer_default=10.0, promer_default=30.0)]:float:'
        '-x[Describe the tiling path by printing the XML contig linking information to stdout]'
        '*:file:_files'
    )
    _arguments $args[@] && ret=0
    return ret
}

_show_aligns(){
    local ret=1
    local -a args
    args+=(
        '-h[Display help information]'
        '-q[Sort alignments by the query start coordinate]'
        '-r[Sort alignments by the reference start coordinate]'
        '-w[Set the screen width (default=terminal width)]:int:'
        '-c[Colorize bases on output]'
        '-m[Space between markers (default=10, 0=disable)]:int:'
        '-x[Set the matrix type (default=2)]:int:((1\:BLOSUM\ 45 2\:BLOSUM\ 62 3\:BLOSUM\ 80))'
        '*:file:_files'
    )
    _arguments $args[@] && ret=0
    return ret
}

_show_diff(){
    local ret=1
    local -a args
    args+=(
        '-f[Output diff information as AMOS features]'
        '-h[Display help information]'
        '-H[Do not show header]'
        '-q[Show diff information for queries]'
        '-r[Show diff information for references (default)]'
        '*:file:_files'
    )
    _arguments $args[@] && ret=0
    return ret
}

_show_snps(){
    local ret=1
    local -a args
    _arguments $args[@] && ret=0
    args+=(
        '-C[Do not report SNPs from alignments with an ambiguous mapping]'
        '-h[Display help information]'
        '-H[Do not print the output header]'
        '-I[Do not report indels]'
        '-l[Include sequence length information in the output]'
        '-q[Sort output lines by query IDs and SNP positions]'
        '-r[Sort output lines by reference IDs and SNP positions]'
        '-S[Specify which alignments to report by passing "show-coords" lines to stdin]'
        '-T[Switch to tab-delimited format]'
        '-x[Include x characters of surrounding SNP context in the output (default=0)]:int:'
        '*:file:_files'
    )
    return ret
}

_delta_filter(){
    local ret=1
    local -a args
    args+=(
        '-1[1-to-1 alignment allowing for rearrangements]'
        '-g[1-to-1 global alignment not allowing rearrangements]'
        '-h[Display help information]'
        '-i[Set the minimum alignment identity (default=0)]:float:'
        '-l[Set the minimum alignment length (default=0)]:int:'
        '-m[Many-to-many alignment allowing for rearrangements]'
        '-q[Maps each position of each query to its best hit in the reference, allowing for reference overlaps]'
        '-r[Maps each position of each reference to its best hit in the query, allowing for query overlaps]'
        '-u[Set the minimum alignment uniqueness (default=0)]:float:'
        '-o[Set the maximum alignment overlap for -r and -q options as a percent of the alignment length (default=100)]:float:'
        '*:file:_files'
    )
    _arguments $args[@] && ret=0
    return ret
}

_mummer(){
    case "$service" in
        mummer) _mummer_self "$@";;
        nucmer) _nucmer "$@";;
        promer) _promer "$@";;
        mummerplot) _mummerplot "$@";;
        show-coords) _show_coords "$@";;
        show-tiling) _show_tiling "$@";;
        show-aligns) _show_aligns "$@";;
        show-diff) _show_diff "$@";;
        show-snps) _show_snps "$@";;
        delta-filter) _delta_filter "$@";;
    esac
}

_mummer "$@"
