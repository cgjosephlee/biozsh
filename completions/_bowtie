#compdef _bowtie bowtie

#autogenerated by cwl2zshcomp


_bowtie () {
    local ret=1
    local args
    args+=(
        '--ebwt[The basename of the index to be searched]:str:'
        '--filelist[{-1 <m1> -2 <m2> | --12 <r> | <s>}]:list:'
        '--filelist_mates[(undocumented)]:list:'
        '--filename[(undocumented)]:str:'
        '(-q)-q[query input files are FASTQ .fq/.fastq (default)]'
        '(-f)-f[query input files are (multi-)FASTA .fa/.mfa]'
        '(-r)-r[query input files are raw one-sequence-per-line]'
        '(-c)-c[query sequences given on cmd line (as <mates>, <singles>)]'
        '(-C)-C[reads and index are in colorspace]'
        '-Q[--quals <file> QV file(s) corresponding to CSFASTA inputs; use with -f -C]:file:_files'
        '(--Q1)--Q1[--Q2 <file> same as -Q, but for mate files 1 and 2 respectively]'
        '-s[--skip <int> skip the first <int> reads/pairs in the input]:int:'
        '-u[--qupto <int> stop after first <int> reads/pairs (excl. skipped reads)]:int:'
        '-5[--trim5 <int> trim <int> bases from 5 (left) end of reads]:int:'
        '-3[--trim3 <int> trim <int> bases from 3 (right) end of reads]:int:'
        '(--phred33-quals)--phred33-quals[input quals are Phred+33 (default)]'
        '(--phred64-quals)--phred64-quals[input quals are Phred+64 (same as --solexa1.3-quals)]'
        '(--solexa-quals)--solexa-quals[input quals are from GA Pipeline ver. < 1.3]'
        '(--solexa1.3-quals)--solexa1.3-quals[input quals are from GA Pipeline ver. >= 1.3]'
        '(--integer-quals)--integer-quals[qualities are given as space-separated integers (not ASCII)]'
        '(--large-index)--large-index[force usage of a large index, even if a small one is present]'
        '-v[<int> report end-to-end hits w/ <=v mismatches; ignore qualities]:int:'
        '-n[--seedmms <int> max mismatches in seed (can be 0-3, default: -n 2)]:int:'
        '-e[--maqerr <int> max sum of mismatch quals across alignment for -n (def: 70)]:int:'
        '-l[--seedlen <int> seed length for -n (default: 28)]:int:'
        '(--nomaqround)--nomaqround[disable Maq-like quality rounding for -n (nearest 10 <= 30)]'
        '-I[--minins <int> minimum insert size for paired-end alignment (default: 0)]:int:'
        '-X[--maxins <int> maximum insert size for paired-end alignment (default: 250)]:int:'
        '(--fr)--fr[--rf/--ff -1, -2 mates align fw/rev, rev/fw, fw/fw (default: --fr)]'
        '(--nofw)--nofw[--norc do not align to forward/reverse-complement reference strand]'
        '--maxbts[<int> max # backtracks for -n 2/3 (default: 125, 800 for --best)]:int:'
        '--pairtries[<int> max # attempts to find mate for anchor hit (default: 100)]:int:'
        '(-y)-y[--tryhard try hard to find valid alignments, at the expense of speed]'
        '--chunkmbs[<int> max megabytes of RAM for best-first search frames (def: 64)]:int:'
        '-k[<int> report up to <int> good alignments per read (default: 1)]:int:'
        '(-a)-a[--all report all alignments per read (much slower than low -k)]'
        '-m[<int> suppress all alignments if > <int> exist (def: no limit)]:int:'
        '-M[<int> like -m, but reports 1 random hit (MAPQ=0); requires --best]:int:'
        '(--best)--best[hits guaranteed best stratum; ties broken by quality]'
        '(--strata)--strata[hits in sub-optimal strata arent reported (requires --best)]'
        '(-t)-t[--time print wall-clock time taken by search phases]'
        '-B[--offbase <int> leftmost ref offset = <int> in bowtie output (default: 0)]:int:'
        '(--quiet)--quiet[print nothing but the alignments]'
        '(--refout)--refout[write alignments to files refXXXXX.map, 1 map per reference]'
        '(--refidx)--refidx[refer to ref. seqs by 0-based index rather than name]'
        '(--al)--al[<fname> write aligned reads/pairs to file(s) <fname>]'
        '(--un)--un[<fname> write unaligned reads/pairs to file(s) <fname>]'
        '(--max)--max[<fname> write reads/pairs over -m limit to file(s) <fname>]'
        '(--suppress)--suppress[<cols> suppresses given columns (comma-delimed) in default output]'
        '(--fullref)--fullref[write entire ref name (default: only up to 1st space)]'
        '--snpphred[<int> Phred penalty for SNP when decoding colorspace (def: 30)]:int:'
        '(--snpfrac)--snpfrac[<dec> approx. fraction of SNP bases (e.g. 0.001); sets --snpphred]'
        '(--col-cseq)--col-cseq[print aligned colorspace seqs as colors, not decoded bases]'
        '(--col-cqual)--col-cqual[print original colorspace quals, not decoded quals]'
        '(--col-keepends)--col-keepends[keep nucleotides at extreme ends of decoded alignment]'
        '(-S)-S[--sam write hits in SAM format]'
        '--mapq[<int> default mapping quality (MAPQ) to print for SAM alignments]:int:'
        '(--sam-nohead)--sam-nohead[suppress header lines (starting with @) for SAM output]'
        '(--sam-nosq)--sam-nosq[suppress @SQ header lines for SAM output]'
        '--sam-RG[<text> add <text> (usually "lab=value") to @RG line of SAM header]:str:'
        '-o[--offrate <int> override offrate of index; must be >= indexs offrate]:int:'
        '-p[--threads <int> number of alignment threads to launch (default: 1)]:int:'
        '(--mm)--mm[use memory-mapped I/O for index; many bowties can share]'
        '(--shmem)--shmem[use shared mem for index; many bowties can share]'
        '--seed[<int> seed for random number generator]:int:'
        '(--verbose)--verbose[verbose output (for debugging)]'
    )
    _arguments $args[@] '*:file:_files' && ret=0
    return ret
}

_bowtie
