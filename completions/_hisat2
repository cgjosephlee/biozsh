#compdef hisat2

_hisat2() {
    integer ret=1
    local I="-h --help --version"
    local -a args
    args+=(
        "(- *)"{-h,--help}'[print this usage message]'
        "(- *)--version[print version information and quit]"
        "($I)-x+[Index filename prefix (minus trailing .X.ht2)]:files:_files -g \*.ht2"
        "($I)*-1+[Files with #1 mates]:file:_sequence _files -g \*.\(gz\|bz2\)"
        "($I)*-2+[Files with #2 mates]:file:_sequence _files -g \*.\(gz\|bz2\)"
        "($I)*-U+[Files with unpaired reads]:file:_sequence _files -g \*.\(gz\|bz2\)"
        "(-)-S[File for SAM output]:file:_files -g \*.sam"
        "($I -q --qseq -f -r -c)-q[query input files are FASTQ .fq/.fastq (default)]"
        "($I -q --qseq -f -r -c)--qseq[query input files are in Illumina's qseq format]"
        "($I -q --qseq -f -r -c)-f[query input files are (multi-)FASTA .fa/.mfa]"
        "($I -q --qseq -f -r -c)-r[query input files are raw one-sequence-per-line]"
        "($I -q --qseq -f -r -c)-c[the parameters are sequences themselves, not files]"
        "($I -s --skip)"{-s+,--skip=}"[skip the first <int> reads/pairs in the input (none)]:int:"
        "($I -u --upto)"{-u+,--upto=}"[stop after first <int> reads/pairs (no limit)]:int:"
        "($I -5 --trim5)"{-5+,--trim5=}"[trim <int> bases from 5'/left end of reads (0)]:int:"
        "($I -3 --trim3)"{-3+,--trim3=}"[trim <int> bases from 3'/right end of reads (0)]:int:"
        "($I --phred33 --phred64 --int-quals)--phred33[qualities are Phred+33 (default)]"
        "($I --phred33 --phred64 --int-quals)--phred64[qualities are Phred+64]"
        "($I --phred33 --phred64 --int-quals)--int-quals[qualities encoded as space-delimited integers]"
        "($I)--n-ceil=[func for max number non-A/C/G/Ts permitted in aln (L,0,0.15)]:func:"
        "($I)--ignore-quals[treat all quality values as 30 on Phred scale]"
        "($I)--nofw[do not align forward (original) version of read]"
        "($I)--norc[do not align reverse-complement version of read]"
        "($I)--pen-cansplice=[penalty for a canonical splice site (0)]:int:"
        "($I)--pen-noncansplice=[penalty for a non-canonical splice site (12)]:int:"
        "($I)--pen-canintronlen=[penalty for long introns (G,-8,1) with canonical splice sites]:func:"
        "($I)--pen-noncanintronlen=[penalty for long introns (G,-8,1) with noncanonical splice sites]:func:"
        "($I)--min-intronlen=[minimum intron length (20)]:int:"
        "($I)--max-intronlen=[maximum intron length (500000)]:int:"
        "($I)--known-splicesite-infile=[provide a list of known splice sites]:file:_files"
        "($I)--novel-splicesite-outfile=[report a list of splice sites]:file:_files"
        "($I)--novel-splicesite-infile=[provide a list of novel splice sites]:file:_files"
        "($I)--no-temp-splicesite[disable the use of splice sites found]"
        "($I)--no-spliced-alignment[disable spliced alignment]"
        "($I)--tmo[reports only those alignments within known transcriptome]"
        "($I)--dta[reports alignments tailored for transcript assemblers]"
        "($I)--dta-cufflinks[reports alignments tailored specifically for cufflinks]"
        "($I)--avoid-pseudogene[tries to avoid aligning reads to pseudogenes (experimental option)]"
        "($I)--no-templatelen-adjustment[disables template length adjustment for RNA-seq reads]"
        "($I)--rna-strandness=[specify strand-specific information (unstranded)]:string:"
        "($I)--no-softclip[no soft-clipping]"
        "($I)--np=[penalty for non-A/C/G/Ts in read/ref (1)]:int:"
        "($I)--mp=[max and min penalties for mismatch; lower qual = lower penalty <6,2>]:int,int:"
        "($I)--sp=[max and min penalties for soft-clipping; lower qual = lower penalty <2,1>]:int,int:"
        "($I)--rdg=[read gap open, extend penalties (5,3)]:int,int:"
        "($I)--rfg=[reference gap open, extend penalties (5,3)]:int,int:"
        "($I)--score-min=[min acceptable alignment score w/r/t read length]:func:"
        "($I)-k+[report up to <int> alns per read (default: 5)]:int:"
        "($I -I --minins)"{-I+,--minins=}"[minimum fragment length (0)]:int:"
        "($I -X --maxins)"{-X+,--maxins=}"[maximum fragment length (500)]:int:"
        "($I --fr --rf --ff)"{--fr,--rf,--ff}'[-1, -2 mates align fw/rev, rev/fw, fw/fw]'
        "($I)--no-mixed[suppress unpaired alignments for paired reads]"
        "($I)--no-discordant[suppress discordant alignments for paired reads]"
        "($I -t --time)"{-t,--time}"[print wall-clock time taken by search phases]"
        "($I --un --un-gz --un-bz2)"{--un,--un-gz,--un-bz2}"=[write unpaired reads that didn't align to file]:file:_files"
        "($I --al --al-gz --al-bz2)"{--al,--al-gz,--al-bz2}"=[write unpaired reads that aligned at least once to file]:file:_files"
        "($I --un-conc --un-conc-gz --un-conc-bz2)"{--un-conc,--un-conc-gz,--un-conc-bz2}"=[write pairs that didn't align concordantly to file]:file:_files"
        "($I --al-conc --al-conc-gz --al-conc-bz2)"{--al-conc,--al-conc-gz,--al-conc-bz2}"=[write pairs that aligned concordantly at least once to file]:file:_files"
        "($I)--summary-file=[print alignment summary to this file]:file:"
        "($I)--new-summary[print alignment summary in a new style]"
        "($I)--quiet[print nothing to stderr except serious errors]"
        "($I)--met-file=[send metrics to file]:file:_files"
        "($I)--met-stderr[send metrics to stderr]"
        "($I)--met=[report internal counters and metrics every <int> secs (1)]:int:"
        "($I)--no-head[suppress header lines, i.e. lines starting with @]"
        "($I)--no-sq[suppress @SQ header lines]"
        "($I)--rg-id=[set read group id, reflected in @RG line and RG:Z: opt field]:text:"
        "($I)--rg=[add text to @RG line of SAM header]:text:"
        "($I)--omit-sec-seq[put '*' in SEQ and QUAL fields for secondary alignments]"
        "($I -o --offrate)"{-o+,--offrate=}'[override offrate of index]:int:'
        "($I -p --threads)"{-p+,--threads=}'[number of alignment threads to launch]:int:'
        "($I)--reorder[force SAM output order to match order of input reads]"
        "($I)--mm[use memory-mapped I/O for index]"
        "($I)--qc-filter[filter out reads that are bad according to QSEQ filter]"
        "($I)--seed=[seed for random number generator]:num:"
        "($I)--non-deterministic[seed rand. gen. arbitrarily instead of using read attributes]"
        "($I --add-chrname)--remove-chrname[remove 'chr' from reference names in alignment]"
        "($I --remove-chrname)--add-chrname[add 'chr' to reference names in alignment]"
    )
    _arguments -s -w -S $args[@] '*:file:_files' && ret=0
    return ret
}
_hisat2
